<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'>

<beans>
    
    <!-- Example override -->
    
    <!-- Also add/merge following properties into 'alfresco-global.properties', eg.
    
                 dir.root=my-root
                 s3.accessKey=ABCDEF...
                 s3.secretKey=UVWXYZ...
                 s3.bucketName=my-globally-unique-bucket-123
                 s3.bucketLocation=EU
                 s3.encryption=AES256
                 s3.flatRoot=false
    -->
    
    <bean id="fileContentStore" class="org.alfresco.module.org_alfresco_module_cloud.repo.content.s3store.TenantS3ContentStore">
        
        <property name="contentRoot"      value="${dir.contentstore}-tenants" />
        
        <!-- temp: these two are for backward compat -->
        <property name="defaultRootDir"   value="${dir.contentstore}" />
        <property name="tenantAdminDAO" ref="tenantAdminDAO" />
        
        <property name="s3AccessKey"      value="${s3.accessKey}" />
        <property name="s3SecretKey"      value="${s3.secretKey}" />
        <property name="s3BucketName"     value="${s3.bucketName}" />
        <property name="s3BucketLocation" value="${s3.bucketLocation}" />
        <property name="s3Encryption"     value="${s3.encryption}" />
        
        <!-- experimental: default is false, if true put all files into tenant root folder ! -->
        <property name="s3FlatRoot" value="${s3.flatRoot}" />
        
        <!-- enables overriding of jets3t properties via alfresco-global.properties -->
        <property name="globalProperties">
            <ref bean="global-properties" />
        </property>
        
        <!-- sets a maximum file size for all content.
                See content-services-context.xml for defaultContentLimitProvider bean -->
        <property name="contentLimitProvider" ref="defaultContentLimitProvider"/>
        
    </bean>
    
    <!-- THOR-405: deleted content will get pushed into this store, where it can be cleaned up at will -->
    <bean id="deletedContentStore" class="org.alfresco.module.org_alfresco_module_cloud.repo.content.s3store.S3ContentStore">
        <constructor-arg><value>${s3.accessKey}</value></constructor-arg>
        <constructor-arg><value>${s3.secretKey}</value></constructor-arg>
        <constructor-arg><value>${s3.bucketName}</value></constructor-arg>
        <constructor-arg><value>${s3.bucketLocation}</value></constructor-arg>
        <constructor-arg><value>${s3.encryption}</value></constructor-arg>
        <constructor-arg><value>${dir.contentstore.deleted}</value></constructor-arg>
        <constructor-arg><value>${s3.flatRoot}</value></constructor-arg>
        <constructor-arg><ref bean="global-properties"/></constructor-arg>
    </bean>
    
    <bean id="contentService" parent="baseContentService">
      <property name="store">
          <ref bean="cachingContentStore" />
      </property>
    </bean>
    
    <!-- note: in this case the 'fileContentStore' is a tenant-routing S3 content store - see above -->
    <bean id="cachingContentStore"
        class="org.alfresco.repo.content.caching.CachingContentStore"
        init-method="init">
        <property name="backingStore" ref="fileContentStore"/>
        <property name="cache" ref="contentCache"/>
        <property name="cacheOnInbound" value="true"/>
        <property name="quota" ref="standardQuotaManager"/> 
    </bean>
    
    <bean
        id="standardQuotaManager"
        class="org.alfresco.repo.content.caching.quota.StandardQuotaStrategy"
        init-method="init"
        destroy-method="shutdown">
            <!--  maxUsageMB: the maximum disk usage that should be used for cached content files -->
            <property name="maxUsageMB" value="${system.content.caching.maxUsageMB}"/>
            
            <!-- maxFileSizeMB: files larger than this size will not be kept in the cache -->
            <property name="maxFileSizeMB" value="${system.content.caching.maxFileSizeMB}"/>
            
            <property name="cache" ref="contentCache"/>
            <property name="cleaner" ref="cachedContentCleaner"/>
    </bean>
    
    <bean id="contentCache" class="org.alfresco.repo.content.caching.ContentCacheImpl">
        <property name="memoryStore" ref="cachingContentStoreCache"/>
        <property name="cacheRoot" value="${dir.cachedcontent}"/>
    </bean>
    

    <bean id="cachingContentStoreCache" class="org.alfresco.enterprise.repo.cache.EhCacheAdapter">
        <property name="cache">
            <bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="cacheManager">
                    <ref bean="internalEHCacheManager" />
                </property>
                <property name="cacheName">
                    <value>org.alfresco.cache.cachingContentStoreCache</value>
                </property>
                <property name="eternal" value="false"/>
                <property name="timeToLive" value="${system.content.caching.timeToLiveSeconds}"/>
                <property name="timeToIdle" value="${system.content.caching.timeToIdleSeconds}"/>
                <property name="maxElementsInMemory" value="${system.content.caching.maxElementsInMemory}"/>
                <property name="maxElementsOnDisk" value="${system.content.caching.maxElementsOnDisk}"/>
                <property name="overflowToDisk" value="true"/>
                <property name="diskPersistent" value="true"/>
            </bean>
        </property>
    </bean>
    
    
    <bean id="cachingContentStoreCleanerJobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass">
            <value>org.alfresco.repo.content.caching.cleanup.CachedContentCleanupJob</value>
        </property>
        <property name="jobDataAsMap">
            <map>
                <entry key="cachedContentCleaner">
                    <ref bean="cachedContentCleaner" />
                </entry>
            </map>
        </property>
    </bean>
    
    <bean id="cachedContentCleaner"
        class="org.alfresco.repo.content.caching.cleanup.CachedContentCleaner"
        init-method="init">
        <property name="maxDeleteWatchCount" value="${system.content.caching.maxDeleteWatchCount}"/>
        <property name="cache" ref="contentCache"/>
    </bean>
    
    <bean id="cachingContentStoreCleanerTrigger" class="org.alfresco.util.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="cachingContentStoreCleanerJobDetail" />
        </property>
        <property name="scheduler">
            <ref bean="schedulerFactory" />
        </property>
        <property name="cronExpression">
            <value>${system.content.caching.contentCleanup.cronExpression}</value>
        </property>
        <property name="startDelayMinutes">
           <value>${system.cronJob.startDelayMinutes}</value>
        </property>
    </bean>
    
    <!-- 
         THOR-796 - improve startup time when there are 1000s of tenants
         
         - bypass the site service "cache warmer" and override web client config to not run tenant deployers (effectively make them NOOPs)
         - note: add here for now due to override order for webClientConfigService 
                 (module-context.xml < web-client-application-context.xml < extension/*-context.xml)
                 which means that it will not apply to local devenv (unless you are also using aws-context.xml with S3)
    -->
    <bean id="siteServiceBootstrap" class="java.util.ArrayList"/>
    
    <bean id="webClientConfigService" class="org.alfresco.repo.config.xml.RepoXMLConfigService">
       <constructor-arg>
         <ref bean="webClientConfigSource" />
      </constructor-arg>
      
      <!-- THOR-796: null injection to bypass tenant deployers -->
      <!-- <property name="tenantAdminService" ref="tenantAdminService"/> -->
      
      <property name="transactionService" ref="transactionService"/>
      
      <property name="configDataCache"   ref="globalConfigCache"/>
   </bean>
   
</beans>

