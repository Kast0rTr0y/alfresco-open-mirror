<?xml version="1.0" encoding="UTF-8" ?>

<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:activiti="http://activiti.org/bpmn"
   xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
   typeLanguage="http://www.w3.org/2001/XMLSchema"
   targetNamespace="http://alfresco.org">

    <process id="accountSelfSignup" name="Cloud Account Self-signup process">
    
        <startEvent id="start" activiti:formKey="suwf:requestSelfSignupTask"/>
        
        <sequenceFlow sourceRef="start" targetRef="registrationPath" />
        
        <!-- This task determines whether the email/username is already signed up, which determines the
             initial path taken through this workflow. -->
        <serviceTask id="registrationPath" name="Registration Path" activiti:delegateExpression="${RegistrationPathDelegate}" />
        <sequenceFlow sourceRef="registrationPath" targetRef="registrationPathOutcome" />
        
        <exclusiveGateway id="registrationPathOutcome"/>
        
        <!-- The email signing up is unknown to the system -->
        <sequenceFlow sourceRef="registrationPathOutcome" targetRef="sendActivateEmailTask" >
            <conditionExpression>${suwf_emailStatus == 'None'}</conditionExpression>
        </sequenceFlow>
        
        <!-- The email signing up is already an activated user -->
        <sequenceFlow sourceRef="registrationPathOutcome" targetRef="sendAlreadyRegisteredEmailTask" >
            <conditionExpression>${suwf_emailStatus == 'AlreadyActivated'}</conditionExpression>
        </sequenceFlow>
        
        <!-- The email signing up is blocked e.g. because it's from a spam domain. -->
        <sequenceFlow sourceRef="registrationPathOutcome" targetRef="blockedEmailEnd" >
            <conditionExpression>${suwf_emailStatus == 'Blocked'}</conditionExpression>
        </sequenceFlow>
        
        <serviceTask id="sendActivateEmailTask" name="Send Account Activation Email" activiti:delegateExpression="${SendEmailDelegate}" />
        
        <sequenceFlow sourceRef="sendActivateEmailTask" targetRef="accountActivationPendingTask" />
        
        <!-- The account signup has been requested and is now waiting for the user to activate by
             clicking on the link in the email.  -->
        <userTask id="accountActivationPendingTask" name="Account Activation Pending" activiti:formKey="suwf:accountActivationPendingTask">
            <extensionElements>
               <activiti:taskListener event="complete" class="org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener">
                  <activiti:field name="script">
                     <activiti:string>
                        execution.setVariable('suwf_firstName', task.getVariable('suwf_firstName'));
                        execution.setVariable('suwf_lastName', task.getVariable('suwf_lastName'));
                        execution.setVariable('suwf_isPreRegistered', task.getVariable('suwf_isPreRegistered'));
                        
                        execution.setVariable('suwf_activationOutcome', task.getVariable('suwf_activationOutcome'));
                        
                        // Reset mail count, possibile that resend is triggered by completing the task with outcome "ResendActivationEmail".
                        if(task.getVariable('suwf_activationOutcome') == 'ResendActivationEmail')
                        {
	                        execution.removeVariable('suwf_mailsSent');
                        }
                      </activiti:string>
                  </activiti:field>
               </activiti:taskListener>
            </extensionElements>
        </userTask>
        
        <!-- Reminder-timer boundary events don't cancel the usertask -->
        <boundaryEvent id="remindTimer3" cancelActivity="false" attachedToRef="accountActivationPendingTask" name="Remind Timer 3 days">
		   <timerEventDefinition>
		    <!-- Repeat twice with 7-day interval -->
		    <timeDuration>${suwf_remindTimer3}</timeDuration>
		  </timerEventDefinition>
		</boundaryEvent>
        <boundaryEvent id="remindTimer7" cancelActivity="false" attachedToRef="accountActivationPendingTask" name="Remind Timer 7, 14 and 21 days">
		   <timerEventDefinition>
		    <!-- Repeat 3 times with 7-day interval -->
		    <timeCycle>${suwf_remindTimer7}</timeCycle>
		  </timerEventDefinition>
		</boundaryEvent>
		
		<!-- End-process-timer boundary event cancels the usertask -->
		<boundaryEvent id="endProcessTimer" cancelActivity="true" attachedToRef="accountActivationPendingTask" name="End Process Timer">
		   <timerEventDefinition>
		    <timeDuration>${suwf_endTimer}</timeDuration>
		  </timerEventDefinition>
		</boundaryEvent>
		
		<sequenceFlow sourceRef="remindTimer3" targetRef="sendReminderEmailTask" />
		<sequenceFlow sourceRef="remindTimer7" targetRef="sendReminderEmailTask" />
		<sequenceFlow sourceRef="endProcessTimer" targetRef="expiredEnd" />
		
		<serviceTask id="sendReminderEmailTask" name="Send Account Activation Reminder Email" activiti:delegateExpression="${SendEmailDelegate}" />
		<sequenceFlow sourceRef="sendReminderEmailTask" targetRef="timerEnd" />
 
        <sequenceFlow sourceRef="accountActivationPendingTask" targetRef="activationOutcome" />
        
        <!-- We allow for multiple exit paths from the above userTask. -->
        <exclusiveGateway id="activationOutcome"/>
        
        <!-- This is the normal path. Proceed to activate the account. -->
        <sequenceFlow sourceRef="activationOutcome" targetRef="activateAccount" >
            <conditionExpression>${suwf_activationOutcome == 'Proceed'}</conditionExpression>
        </sequenceFlow>
        
        <!-- However, we can also loop back to resend the account activation request email. -->
        <sequenceFlow sourceRef="activationOutcome" targetRef="sendActivateEmailTask" >
            <conditionExpression>${suwf_activationOutcome == 'ResendActivationEmail'}</conditionExpression>
        </sequenceFlow>
        
        
        <!-- The user has submitted the necessary metadata to activate the account.
             This includes firstName, lastName etc. -->
        <serviceTask id="activateAccount" name="Activate Account" activiti:delegateExpression="${ActivateAccountDelegate}"
                     activiti:formKey="suwf:accountActivationRequestedTask"/>
        
        <sequenceFlow sourceRef="activateAccount" targetRef="end" />
        
        <!-- The user/email is already registered so we send a different email and end the workflow. -->
        <serviceTask id="sendAlreadyRegisteredEmailTask" name="Send Already Activated Email"
                     activiti:formKey="suwf:sendSignupRequestedEmailTask"
                     activiti:delegateExpression="${SendEmailDelegate}"/>
        
        <sequenceFlow sourceRef="sendAlreadyRegisteredEmailTask" targetRef="end" />
        
        <endEvent id="end" />
        
        <endEvent id="expiredEnd" />
        
        <endEvent id="blockedEmailEnd">
           <errorEventDefinition errorRef="blockedEmail"/>
        </endEvent>
        <!-- End-event after reminder-timer. Doesn't actually end the process, just the forked-off timer execution -->
        <endEvent id="timerEnd" />
        
        
    </process>
    
</definitions>
