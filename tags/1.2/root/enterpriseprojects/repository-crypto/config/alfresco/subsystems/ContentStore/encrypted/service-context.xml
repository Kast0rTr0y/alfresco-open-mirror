<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'>

<beans>
	
	<!-- Load the cryptodoc message bundle -->
	<bean id="cryptodocResourceBundle" class="org.alfresco.i18n.ResourceBundleBootstrapComponent">
      <property name="resourceBundles">
         <list>
            <value>alfresco.enterprise.messages.cryptodoc-messages</value>
         </list>
      </property>
   </bean>

    <bean id="symmetricKeyReencryptor" class="org.alfresco.enterprise.repo.content.cryptodoc.jce.SymmetricKeyReencryptor" init-method="init">
        <property name="jobLockService" ref="jobLockService" />
        <property name="transactionService" ref="TransactionService" />
        <property name="keyEncryptedKeyProcessor" ref="cryptodoc.jceService" />
        <property name="contentDataDAO" ref="contentDataDAO" />
    </bean>

    <bean id="keyGenerationService" class="org.alfresco.enterprise.repo.content.cryptodoc.jce.KeyGenerationServiceImpl" init-method="init">
        <property name="defaultSymmetricAlgorithm" value="${cryptodoc.jce.keygen.defaultSymmetricAlgorithm}" />
        <property name="defaultSymmetricKeySize" value="${cryptodoc.jce.keygen.defaultSymmetricKeySize}" />
        <property name="providerName" value="${cryptodoc.jce.providerName}" />
    </bean>

    <bean id="keyStoreLoader" class="org.alfresco.enterprise.repo.content.cryptodoc.jce.KeyStoreLoader">
    </bean>

    <bean id="masterKeyStoreService" class="org.alfresco.enterprise.repo.content.cryptodoc.jce.MasterKeyStoreServiceImpl" init-method="init">
        <property name="providerName" value="${cryptodoc.jce.providerName}" />
        <property name="masterKeyCache" ref="contentUrlMasterKeyCache" />
        <property name="encryptingMasterKeyCache" ref="contentUrlEncryptingMasterKeyCache" />
        <property name="keyGenerationService" ref="keyGenerationService" />
        <property name="contentDataDAO" ref="contentDataDAO" />
        <property name="keystoreType" value="${cryptodoc.jce.keystore.type}" />
        <property name="keystorePath" value="${cryptodoc.jce.keystore.path}" />
        <property name="keystorePassword" value="${cryptodoc.jce.keystore.password}" />
        <property name="keyAliases" value="${cryptodoc.jce.key.aliases}" />
        <property name="keyPasswords" value="${cryptodoc.jce.key.passwords}" />
        <property name="defaultSymmetricAlgorithm" value="${cryptodoc.jce.keygen.defaultSymmetricAlgorithm}" />
        <property name="defaultSymmetricKeySize" value="${cryptodoc.jce.keygen.defaultSymmetricKeySize}" />
        <property name="symmetricKeyReencryptor" ref="symmetricKeyReencryptor" />
        <property name="keyStoreLoader" ref="keyStoreLoader" /> 
        <property name="transactionService" ref="transactionService"/>
    </bean>

	<!-- The basis for all JCE dependant operations; JCE is the built-in Java Cryptography Extension and used as the default engine for cryptodoc -->
	<bean id="cryptodoc.jceService" class="org.alfresco.enterprise.repo.content.cryptodoc.jce.JceService">
        <property name="masterKeystoreService" ref="cryptodoc.masterKeystoreService" />
        <property name="contentDataDAO" ref="contentDataDAO" />
	</bean>
	
	<!-- An interface to document key generation (default is JCE) -->
	<bean id="cryptodoc.keyGenerationService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces"><value>org.alfresco.enterprise.repo.content.cryptodoc.KeyGenerationService</value></property>
		<property name="target"><ref local="keyGenerationService" /></property>
	</bean>

    <bean id="MasterKeyStoreService_transaction" class="org.alfresco.repo.transaction.RetryingTransactionInterceptor">
        <property name="transactionService">
            <ref bean="TransactionService"/>
        </property>
        <property name="transactionManager">
            <ref bean="transactionManager"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="supportsId">${server.transaction.mode.readOnly}</prop>
                <prop key="exist*">${server.transaction.mode.readOnly}</prop>
                <prop key="get*">${server.transaction.mode.readOnly}</prop>
                <prop key="has*">${server.transaction.mode.readOnly}</prop>
                <prop key="*">${server.transaction.mode.default}</prop>
            </props>
        </property>
    </bean>

	<!-- An interface to master key storage (default is JCE) -->
	<bean id="cryptodoc.masterKeystoreService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces"><value>org.alfresco.enterprise.repo.content.cryptodoc.MasterKeystoreService</value></property>
		<property name="target"><ref local="masterKeyStoreService" /></property>
        <property name="interceptorNames">
            <list>
                <idref local="MasterKeyStoreService_transaction"/>
            </list>
        </property>
	</bean>
	
	<!-- An interface to encrypt/decrypt engine (default is JCE) -->
	<bean id="cryptodoc.cryptoEngineService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces"><value>org.alfresco.enterprise.repo.content.cryptodoc.CryptoEngineService</value></property>
		<property name="target"><ref local="cryptodoc.jceService" /></property>
	</bean>

    <bean id="cryptodoc.mtFileContentStore" class="org.alfresco.repo.tenant.TenantRoutingFileContentStore" parent="baseTenantRoutingContentStore">
        <property name="rootLocation" value="${dir.contentstore}" />
        <property name="contentLimitProvider" ref="defaultContentLimitProvider" />
    </bean>
	
	<bean id="cryptodoc.deletedContentStore" class="org.alfresco.enterprise.repo.content.cryptodoc.impl.CryptoContentStore" init-method="init">
        <property name="contentStore" ref="cryptodoc.mtFileContentStore" />
        <property name="keyGenerationService" ref="cryptodoc.keyGenerationService" />
        <property name="contentCryptoEngineService" ref="cryptodoc.cryptoEngineService" />
        <property name="contentDataDAO" ref="contentDataDAO"/>
        <property name="descriptorService" ref="DescriptorService" />
        <property name="keyProcessor" ref="cryptodoc.jceService"/>
		<property name="storeName"><value>Encrypted Deleted File Content Store</value></property>
        <property name="cryptodocLicense" ref="cryptodoc.license" />
	</bean>
	
	<bean id="cryptodoc.deletedContentBackupListener" class="org.alfresco.repo.content.cleanup.DeletedContentBackupCleanerListener">
		<property name="store">
			<ref bean="cryptodoc.deletedContentStore" />
		</property>
	</bean>

    <bean id="cryptodoc.fileContentStore" class="org.alfresco.enterprise.repo.content.cryptodoc.impl.CryptoContentStore" init-method="init">
        <property name="contentStore" ref="cryptodoc.mtFileContentStore" />
        <property name="keyGenerationService" ref="cryptodoc.keyGenerationService" />
        <property name="contentCryptoEngineService" ref="cryptodoc.cryptoEngineService" />
        <property name="contentDataDAO" ref="contentDataDAO"/>
        <property name="descriptorService" ref="DescriptorService" />
        <property name="keyProcessor" ref="cryptodoc.jceService"/>
		<property name="storeName"><value>Encrypted File Content Store</value></property>
        <property name="cryptodocLicense" ref="cryptodoc.license" />
    </bean>

    <bean id="monitor" class="org.alfresco.enterprise.repo.content.cryptodoc.jmx.CryptoDoc" >
        <constructor-arg ref="cryptodoc.masterKeystoreService"></constructor-arg>
    </bean>

    <alias name="cryptodoc.fileContentStore" alias="fileContentStore"/>
</beans>
