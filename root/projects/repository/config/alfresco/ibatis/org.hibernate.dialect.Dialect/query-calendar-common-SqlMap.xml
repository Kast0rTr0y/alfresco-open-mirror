<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="alfresco.query.calendar">

    <!--                -->
    <!-- Result Maps    -->
    <!--                -->
    
    <resultMap id="result_Calendar" type="Calendar">
        <id property="id" column="id" jdbcType="BIGINT" javaType="java.lang.Long"/>
        <result property="name" column="name" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="fromDate" column="from_date" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="toDate" column="to_date" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="recurrenceRule" column="recurrence_rule" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="recurrenceLastMeeting" column="recurrence_last_meeting" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <association property="node" resultMap="alfresco.node.result_Node"/>
    </resultMap>
    
    <!-- GetCalendarEntries Canned Query (model-specific) - note: date properties are stored as ISO 8061 string -->
    
    <select id="select_GetCalendarEntriesCannedQuery" parameterType="Calendar" resultMap="result_Calendar">
       select
            childNode.id               as id,
            childStore.protocol        as protocol,
            childStore.identifier      as identifier,
            childNode.uuid             as uuid,
            childNode.audit_created    as audit_created,
            childNode.audit_creator    as audit_creator,
            prop_fromdate.string_value as from_date,
            prop_todate.string_value   as to_date,
            prop_recurrenceRule.string_value         as recurrence_rule,
            prop_recurrenceLastMeeting.string_value  as recurrence_last_meeting,
            prop_name.string_value     as name
        from
            alf_child_assoc assoc
            join alf_node childNode on (childNode.id = assoc.child_node_id)
            join alf_store childStore on (childStore.id = childNode.store_id)
            left join alf_node_properties prop_fromdate on (prop_fromdate.node_id = childNode.id and prop_fromdate.qname_id = #{fromDateQNameId})
            left join alf_node_properties prop_todate on (prop_todate.node_id = childNode.id and prop_todate.qname_id = #{toDateQNameId})
            left join alf_node_properties prop_recurrenceRule on (prop_recurrenceRule.node_id = childNode.id and prop_recurrenceRule.qname_id = #{recurrenceRuleQNameId})
            left join alf_node_properties prop_recurrenceLastMeeting on (prop_recurrenceLastMeeting.node_id = childNode.id and prop_recurrenceLastMeeting.qname_id = #{recurrenceLastMeetingQNameId})
            left join alf_node_properties prop_name on (prop_name.node_id = childNode.id and prop_name.qname_id = #{nameQNameId})
        where
            assoc.parent_node_id IN <foreach item="nodeRef" index="index" collection="sitesContainerNodeIds" open="(" separator="," close=")">#{nodeRef}</foreach> 
            and childNode.type_qname_id = #{contentTypeQNameId}
    </select>
    
</mapper>
