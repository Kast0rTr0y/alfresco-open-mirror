Index: src/java/org/apache/poi/poifs/filesystem/NPOIFSFileSystem.java
===================================================================
--- src/java/org/apache/poi/poifs/filesystem/NPOIFSFileSystem.java	(revision 1708952)
+++ src/java/org/apache/poi/poifs/filesystem/NPOIFSFileSystem.java	(working copy)
@@ -14,6 +14,10 @@
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
+
+   2015 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
 ==================================================================== */
 
 
@@ -319,20 +323,20 @@
      */
     public static boolean hasPOIFSHeader(InputStream inp) throws IOException {
         // We want to peek at the first 8 bytes
-        inp.mark(8);
+        inp.mark(8);
+
+        byte[] header = new byte[8];
+        int bytesRead = IOUtils.readFully(inp, header);
+        LongField signature = new LongField(HeaderBlockConstants._signature_offset, header);
+
+        // Wind back those 8 bytes
+        if(inp instanceof PushbackInputStream) {
+            PushbackInputStream pin = (PushbackInputStream)inp;
+            pin.unread(header, 0, bytesRead);
+        } else {
+            inp.reset();
+        }
 
-        byte[] header = new byte[8];
-        IOUtils.readFully(inp, header);
-        LongField signature = new LongField(HeaderBlockConstants._signature_offset, header);
-
-        // Wind back those 8 bytes
-        if(inp instanceof PushbackInputStream) {
-            PushbackInputStream pin = (PushbackInputStream)inp;
-            pin.unread(header);
-        } else {
-            inp.reset();
-        }
-
         // Did it match the signature?
         return (signature.get() == HeaderBlockConstants._signature);
     }
Index: src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java
===================================================================
--- src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java	(revision 1708952)
+++ src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java	(working copy)
@@ -14,6 +14,10 @@
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
+
+   2015 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
 ==================================================================== */
 
 
@@ -37,7 +41,17 @@
 import org.apache.poi.poifs.property.DirectoryProperty;
 import org.apache.poi.poifs.property.Property;
 import org.apache.poi.poifs.property.PropertyTable;
-import org.apache.poi.poifs.storage.*;
+import org.apache.poi.poifs.storage.BATBlock;
+import org.apache.poi.poifs.storage.BlockAllocationTableReader;
+import org.apache.poi.poifs.storage.BlockAllocationTableWriter;
+import org.apache.poi.poifs.storage.BlockList;
+import org.apache.poi.poifs.storage.BlockWritable;
+import org.apache.poi.poifs.storage.HeaderBlock;
+import org.apache.poi.poifs.storage.HeaderBlockConstants;
+import org.apache.poi.poifs.storage.HeaderBlockWriter;
+import org.apache.poi.poifs.storage.RawDataBlockList;
+import org.apache.poi.poifs.storage.SmallBlockTableReader;
+import org.apache.poi.poifs.storage.SmallBlockTableWriter;
 import org.apache.poi.util.CloseIgnoringInputStream;
 import org.apache.poi.util.IOUtils;
 import org.apache.poi.util.LongField;
@@ -204,13 +218,13 @@
         inp.mark(8);
 
         byte[] header = new byte[8];
-        IOUtils.readFully(inp, header);
+        int bytesRead = IOUtils.readFully(inp, header);
         LongField signature = new LongField(HeaderBlockConstants._signature_offset, header);
 
         // Wind back those 8 bytes
         if(inp instanceof PushbackInputStream) {
             PushbackInputStream pin = (PushbackInputStream)inp;
-            pin.unread(header);
+            pin.unread(header, 0, bytesRead);
         } else {
             inp.reset();
         }
Index: src/ooxml/java/org/apache/poi/patch/AlfrescoPoiPatchUtils.java
===================================================================
--- src/ooxml/java/org/apache/poi/patch/AlfrescoPoiPatchUtils.java	(revision 0)
+++ src/ooxml/java/org/apache/poi/patch/AlfrescoPoiPatchUtils.java	(working copy)
@@ -0,0 +1,289 @@
+/*
+ * Copyright (C) 2005-2014 Alfresco Software Limited.
+ *
+ * This file is part of Alfresco
+ *
+ * Alfresco is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Alfresco is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
+ * 
+ * 2014 - Alfresco Software, Ltd.
+ * Alfresco Software has added this file
+ * The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
+ */
+package org.apache.poi.patch;
+
+import java.io.Serializable;
+import java.util.AbstractList;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.poi.POIXMLFactory;
+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
+import org.apache.poi.openxml4j.opc.PackagePart;
+import org.apache.poi.openxml4j.opc.PackageRelationship;
+import org.apache.poi.openxml4j.opc.PackageRelationshipCollection;
+import org.apache.poi.xslf.usermodel.XSLFFactory;
+import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFootnotes;
+import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFtnEdn;
+
+/**
+ * Patch for ALF-17957 and MNT-11823
+ * 
+ * @author Viachaslau Tsikhanovich
+ * @author Dmitry Velichkevich
+ */
+public class AlfrescoPoiPatchUtils
+{
+    private static final int DEFAULT_FOOTNOTES_LIMIT = 50;
+
+
+    private static final String DEFAULT_CONTEXT = "DEFAULT_CONTEXT";
+
+    private static final String PROP_POI_FOOTNOTES_LIMIT = "poiFootnotesLimit";
+
+    private static final String PROP_POI_EXTRACT_PROPERTIES_ONLY = "poiExtractPropertiesOnly";
+
+    private static final String PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES = "poiAllowableXslfRelationshipTypes";
+
+
+    private static final ThreadLocal<String> CONTEXT = new ThreadLocal<String>();
+
+
+    /**
+     * Context specific properties with the configuration of properties for the {@link AlfrescoPoiPatchUtils#DEFAULT_CONTEXT} context
+     */
+    private static Map<String, Map<String, Serializable>> properties = new HashMap<String, Map<String, Serializable>>();
+    static
+    {
+        Map<String, Serializable> defaultContextProperties = new HashMap<String, Serializable>();
+        defaultContextProperties.put(PROP_POI_FOOTNOTES_LIMIT, DEFAULT_FOOTNOTES_LIMIT);
+        defaultContextProperties.put(PROP_POI_EXTRACT_PROPERTIES_ONLY, false);
+        defaultContextProperties.put(PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES, null);
+        properties.put(DEFAULT_CONTEXT, defaultContextProperties);
+    }
+
+
+    /**
+     * Sets footnotes limit for XWPF documents parser. Default value {@link AlfrescoPoiPatchUtils#DEFAULT_FOOTNOTES_LIMIT} is set if this parameter is not set directly. Related to
+     * MNT-577
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param poiFootnotesLimit - {@link Integer} value which determines the desired footnotes limit
+     */
+    public static void setPoiFootnotesLimit(String context, int poiFootnotesLimit)
+    {
+        if (poiFootnotesLimit < 0)
+        {
+            poiFootnotesLimit = DEFAULT_FOOTNOTES_LIMIT;
+        }
+
+        setProperty(context, PROP_POI_FOOTNOTES_LIMIT, poiFootnotesLimit);
+    }
+
+    /**
+     * Sets the flag to determine whether the entire content of XSLF document must be parsed (<code>false</code>) or not (<code>true</code>). Default value is <code>false</code>.
+     * Related to MNT-11823
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param poiExtractPropertiesOnly - {@link Boolean} value which determines how parser must process the entire content of XSLF document
+     */
+    public static void setPoiExtractPropertiesOnly(String context, boolean poiExtractPropertiesOnly)
+    {
+        setProperty(context, PROP_POI_EXTRACT_PROPERTIES_ONLY, poiExtractPropertiesOnly);
+    }
+
+    /**
+     * Sets {@link Set}&lt;{@link String}&gt; set which determines the list of allowable relationship types for traversing during analyzing of XSLF document. Default value is
+     * <code>null</code>. Usually determines relationships which refer to XSLF configuration parts. Related to MNT-11823
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param poiExtractPropertiesOnly - {@link Set}&lt;{@link String}&gt; instance which contains allowed document relationship types
+     */
+    public static void setPoiAllowableXslfRelationshipTypes(String context, Set<String> poiAllowableXslfRelationshipTypes)
+    {
+        setProperty(context, PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES, (Serializable) poiAllowableXslfRelationshipTypes);
+    }
+
+    /**
+     * Thread-safe method to set specified <code>propertyName</code> property. Initializes properties for <code>context</code> if it is not found
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param propertyName - {@link String} value which determines name of the property
+     * @param propertyValue - {@link Serializable} instance which specifies value of the property
+     */
+    private static void setProperty(String context, String propertyName, Serializable propertyValue)
+    {
+        synchronized (properties)
+        {
+            Map<String, Serializable> currentProperties = properties.get(context);
+            if (null == currentProperties)
+            {
+                currentProperties = new HashMap<String, Serializable>();
+                currentProperties.put(PROP_POI_FOOTNOTES_LIMIT, DEFAULT_FOOTNOTES_LIMIT);
+                currentProperties.put(PROP_POI_EXTRACT_PROPERTIES_ONLY, false);
+                properties.put(context, currentProperties);
+            }
+            currentProperties.put(propertyName, propertyValue);
+        }
+    }
+
+    /**
+     * Sets the current POI context. {@link AlfrescoPoiPatchUtils} will use POI properties for specified context
+     * 
+     * @param context - {@link String} value which specifies current POI context
+     */
+    public static void setContext(String context)
+    {
+        CONTEXT.set(context);
+    }
+
+    /**
+     * Gets current POI context. {@link AlfrescoPoiPatchUtils} will use POI properties for returned context. {@link AlfrescoPoiPatchUtils#DEFAULT_CONTEXT} is used if context is not
+     * specified explicitly. Default properties are configured for the default context
+     * 
+     * @return {@link String} value which determines the current POI context
+     */
+    private static String getContext()
+    {
+        String result = CONTEXT.get();
+        return (null != result) ? (result) : (DEFAULT_CONTEXT);
+    }
+
+    /**
+     * Thread-safe method to get <code>propertyName</code> property for the current {@link AlfrescoPoiPatchUtils#getContext()} context
+     * 
+     * @param <T> - class of the requested property
+     * @param valueClass - {@link Class} instance which specifies expected return type of the requested property
+     * @param propertyName - {@link String} value which specifies the name of the property
+     * @return <code>T</code> instance which represents the value of the property
+     */
+    @SuppressWarnings("unchecked")
+    private static <T> T getProperty(Class<T> valueClass, String propertyName)
+    {
+        T result = null;
+        String context = getContext();
+
+        synchronized (properties)
+        {
+            Map<String, Serializable> currentProperties = properties.get(context);
+
+            if (null == currentProperties)
+            {
+                return null;
+            }
+
+            Serializable value = currentProperties.get(propertyName);
+            if ((null != value) && valueClass.isAssignableFrom(value.getClass()))
+            {
+                result = (T) value;
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * MNT-577: Alfresco is running 100% CPU for over 10 minutes while extracting metadata for Word office document <br />
+     * <br />
+     * Converts mutable {@link CTFootnotes} to read-only limited list of {@link CTFtnEdn}
+     * 
+     * @param mutableFootnotes - {@link CTFootnotes} instance which contains all currently loaded footnotes
+     * @return immutable {@link List}&lt;{@link CTFtnEdn}&gt; list
+     */
+    public static List<CTFtnEdn> getLimitedReadonlyList(final CTFootnotes mutableFootnotes)
+    {
+        Integer poiFootnotesLimit = getProperty(Integer.class, PROP_POI_FOOTNOTES_LIMIT);
+
+        // on each call parses entire footnotes store to calculate size
+        final int originalSize = mutableFootnotes.getFootnoteList().size();
+        final int size = Math.min(originalSize, poiFootnotesLimit);
+
+        return new AbstractList<CTFtnEdn>()
+        {
+            public CTFtnEdn get(int paramInt)
+            {
+                // on each call parses footnotes store from the beginning to get item
+                return mutableFootnotes.getFootnoteArray(paramInt);
+            }
+
+            public CTFtnEdn set(int paramInt, CTFtnEdn paramCTFtnEdn)
+            {
+                throw new IllegalArgumentException("Operation not supported");
+            }
+
+            public void add(int paramInt, CTFtnEdn paramCTFtnEdn)
+            {
+                throw new IllegalArgumentException("Operation not supported");
+            }
+
+            public CTFtnEdn remove(int paramInt)
+            {
+                throw new IllegalArgumentException("Operation not supported");
+            }
+
+            public int size()
+            {
+                return size;
+            }
+        };
+    }
+
+    /**
+     * MNT-11823: Upload of PPTX causes very high memory usage leading to system instability<br />
+     * <br />
+     * Returns filtered list of {@link PackageRelationship} relationships if properties extraction is enabled and parsing is going on for XSLF document or all relationships of the
+     * document
+     * 
+     * @param factory - {@link POIXMLFactory} instance
+     * @param packagePart - {@link PackagePart} instance which represents part of OOXML package
+     * @return {@link Iterable}&lt;{@link PackageRelationship}&gt; instance which contains list of allowable package relationships
+     * @throws InvalidFormatException
+     */
+    @SuppressWarnings("unchecked")
+    public static Iterable<PackageRelationship> getRelationships(POIXMLFactory factory, PackagePart packagePart) throws InvalidFormatException
+    {
+        Boolean poiExtractPropertiesOnly = getProperty(Boolean.class, PROP_POI_EXTRACT_PROPERTIES_ONLY);
+        Set<String> poiAllowableXslfRelationshipTypes = getProperty(Set.class, PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES);
+
+        if (!poiExtractPropertiesOnly || !(factory instanceof XSLFFactory))
+        {
+            return packagePart.getRelationships();
+        }
+
+        List<PackageRelationship> result = new LinkedList<PackageRelationship>();
+
+        if (null == poiAllowableXslfRelationshipTypes)
+        {
+            return result;
+        }
+
+        if (1 == poiAllowableXslfRelationshipTypes.size())
+        {
+            return packagePart.getRelationshipsByType(poiAllowableXslfRelationshipTypes.iterator().next());
+        }
+
+        for (String type : poiAllowableXslfRelationshipTypes)
+        {
+            PackageRelationshipCollection relationshipsByType = packagePart.getRelationshipsByType(type);
+            for (PackageRelationship relationship : relationshipsByType)
+            {
+                result.add(relationship);
+            }
+        }
+
+        return result;
+    }
+}
Index: src/ooxml/java/org/apache/poi/patch/AlfrescoPoiPatchUtils.java
===================================================================
--- src/ooxml/java/org/apache/poi/patch/AlfrescoPoiPatchUtils.java	(revision 0)
+++ src/ooxml/java/org/apache/poi/patch/AlfrescoPoiPatchUtils.java	(working copy)
@@ -0,0 +1,289 @@
+/*
+ * Copyright (C) 2005-2014 Alfresco Software Limited.
+ *
+ * This file is part of Alfresco
+ *
+ * Alfresco is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Alfresco is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
+ * 
+ * 2014 - Alfresco Software, Ltd.
+ * Alfresco Software has added this file
+ * The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
+ */
+package org.apache.poi.patch;
+
+import java.io.Serializable;
+import java.util.AbstractList;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.poi.POIXMLFactory;
+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
+import org.apache.poi.openxml4j.opc.PackagePart;
+import org.apache.poi.openxml4j.opc.PackageRelationship;
+import org.apache.poi.openxml4j.opc.PackageRelationshipCollection;
+import org.apache.poi.xslf.usermodel.XSLFFactory;
+import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFootnotes;
+import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFtnEdn;
+
+/**
+ * Patch for ALF-17957 and MNT-11823
+ * 
+ * @author Viachaslau Tsikhanovich
+ * @author Dmitry Velichkevich
+ */
+public class AlfrescoPoiPatchUtils
+{
+    private static final int DEFAULT_FOOTNOTES_LIMIT = 50;
+
+
+    private static final String DEFAULT_CONTEXT = "DEFAULT_CONTEXT";
+
+    private static final String PROP_POI_FOOTNOTES_LIMIT = "poiFootnotesLimit";
+
+    private static final String PROP_POI_EXTRACT_PROPERTIES_ONLY = "poiExtractPropertiesOnly";
+
+    private static final String PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES = "poiAllowableXslfRelationshipTypes";
+
+
+    private static final ThreadLocal<String> CONTEXT = new ThreadLocal<String>();
+
+
+    /**
+     * Context specific properties with the configuration of properties for the {@link AlfrescoPoiPatchUtils#DEFAULT_CONTEXT} context
+     */
+    private static Map<String, Map<String, Serializable>> properties = new HashMap<String, Map<String, Serializable>>();
+    static
+    {
+        Map<String, Serializable> defaultContextProperties = new HashMap<String, Serializable>();
+        defaultContextProperties.put(PROP_POI_FOOTNOTES_LIMIT, DEFAULT_FOOTNOTES_LIMIT);
+        defaultContextProperties.put(PROP_POI_EXTRACT_PROPERTIES_ONLY, false);
+        defaultContextProperties.put(PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES, null);
+        properties.put(DEFAULT_CONTEXT, defaultContextProperties);
+    }
+
+
+    /**
+     * Sets footnotes limit for XWPF documents parser. Default value {@link AlfrescoPoiPatchUtils#DEFAULT_FOOTNOTES_LIMIT} is set if this parameter is not set directly. Related to
+     * MNT-577
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param poiFootnotesLimit - {@link Integer} value which determines the desired footnotes limit
+     */
+    public static void setPoiFootnotesLimit(String context, int poiFootnotesLimit)
+    {
+        if (poiFootnotesLimit < 0)
+        {
+            poiFootnotesLimit = DEFAULT_FOOTNOTES_LIMIT;
+        }
+
+        setProperty(context, PROP_POI_FOOTNOTES_LIMIT, poiFootnotesLimit);
+    }
+
+    /**
+     * Sets the flag to determine whether the entire content of XSLF document must be parsed (<code>false</code>) or not (<code>true</code>). Default value is <code>false</code>.
+     * Related to MNT-11823
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param poiExtractPropertiesOnly - {@link Boolean} value which determines how parser must process the entire content of XSLF document
+     */
+    public static void setPoiExtractPropertiesOnly(String context, boolean poiExtractPropertiesOnly)
+    {
+        setProperty(context, PROP_POI_EXTRACT_PROPERTIES_ONLY, poiExtractPropertiesOnly);
+    }
+
+    /**
+     * Sets {@link Set}&lt;{@link String}&gt; set which determines the list of allowable relationship types for traversing during analyzing of XSLF document. Default value is
+     * <code>null</code>. Usually determines relationships which refer to XSLF configuration parts. Related to MNT-11823
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param poiExtractPropertiesOnly - {@link Set}&lt;{@link String}&gt; instance which contains allowed document relationship types
+     */
+    public static void setPoiAllowableXslfRelationshipTypes(String context, Set<String> poiAllowableXslfRelationshipTypes)
+    {
+        setProperty(context, PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES, (Serializable) poiAllowableXslfRelationshipTypes);
+    }
+
+    /**
+     * Thread-safe method to set specified <code>propertyName</code> property. Initializes properties for <code>context</code> if it is not found
+     * 
+     * @param context - {@link String} value which specifies context of the property
+     * @param propertyName - {@link String} value which determines name of the property
+     * @param propertyValue - {@link Serializable} instance which specifies value of the property
+     */
+    private static void setProperty(String context, String propertyName, Serializable propertyValue)
+    {
+        synchronized (properties)
+        {
+            Map<String, Serializable> currentProperties = properties.get(context);
+            if (null == currentProperties)
+            {
+                currentProperties = new HashMap<String, Serializable>();
+                currentProperties.put(PROP_POI_FOOTNOTES_LIMIT, DEFAULT_FOOTNOTES_LIMIT);
+                currentProperties.put(PROP_POI_EXTRACT_PROPERTIES_ONLY, false);
+                properties.put(context, currentProperties);
+            }
+            currentProperties.put(propertyName, propertyValue);
+        }
+    }
+
+    /**
+     * Sets the current POI context. {@link AlfrescoPoiPatchUtils} will use POI properties for specified context
+     * 
+     * @param context - {@link String} value which specifies current POI context
+     */
+    public static void setContext(String context)
+    {
+        CONTEXT.set(context);
+    }
+
+    /**
+     * Gets current POI context. {@link AlfrescoPoiPatchUtils} will use POI properties for returned context. {@link AlfrescoPoiPatchUtils#DEFAULT_CONTEXT} is used if context is not
+     * specified explicitly. Default properties are configured for the default context
+     * 
+     * @return {@link String} value which determines the current POI context
+     */
+    private static String getContext()
+    {
+        String result = CONTEXT.get();
+        return (null != result) ? (result) : (DEFAULT_CONTEXT);
+    }
+
+    /**
+     * Thread-safe method to get <code>propertyName</code> property for the current {@link AlfrescoPoiPatchUtils#getContext()} context
+     * 
+     * @param <T> - class of the requested property
+     * @param valueClass - {@link Class} instance which specifies expected return type of the requested property
+     * @param propertyName - {@link String} value which specifies the name of the property
+     * @return <code>T</code> instance which represents the value of the property
+     */
+    @SuppressWarnings("unchecked")
+    private static <T> T getProperty(Class<T> valueClass, String propertyName)
+    {
+        T result = null;
+        String context = getContext();
+
+        synchronized (properties)
+        {
+            Map<String, Serializable> currentProperties = properties.get(context);
+
+            if (null == currentProperties)
+            {
+                return null;
+            }
+
+            Serializable value = currentProperties.get(propertyName);
+            if ((null != value) && valueClass.isAssignableFrom(value.getClass()))
+            {
+                result = (T) value;
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * MNT-577: Alfresco is running 100% CPU for over 10 minutes while extracting metadata for Word office document <br />
+     * <br />
+     * Converts mutable {@link CTFootnotes} to read-only limited list of {@link CTFtnEdn}
+     * 
+     * @param mutableFootnotes - {@link CTFootnotes} instance which contains all currently loaded footnotes
+     * @return immutable {@link List}&lt;{@link CTFtnEdn}&gt; list
+     */
+    public static List<CTFtnEdn> getLimitedReadonlyList(final CTFootnotes mutableFootnotes)
+    {
+        Integer poiFootnotesLimit = getProperty(Integer.class, PROP_POI_FOOTNOTES_LIMIT);
+
+        // on each call parses entire footnotes store to calculate size
+        final int originalSize = mutableFootnotes.getFootnoteList().size();
+        final int size = Math.min(originalSize, poiFootnotesLimit);
+
+        return new AbstractList<CTFtnEdn>()
+        {
+            public CTFtnEdn get(int paramInt)
+            {
+                // on each call parses footnotes store from the beginning to get item
+                return mutableFootnotes.getFootnoteArray(paramInt);
+            }
+
+            public CTFtnEdn set(int paramInt, CTFtnEdn paramCTFtnEdn)
+            {
+                throw new IllegalArgumentException("Operation not supported");
+            }
+
+            public void add(int paramInt, CTFtnEdn paramCTFtnEdn)
+            {
+                throw new IllegalArgumentException("Operation not supported");
+            }
+
+            public CTFtnEdn remove(int paramInt)
+            {
+                throw new IllegalArgumentException("Operation not supported");
+            }
+
+            public int size()
+            {
+                return size;
+            }
+        };
+    }
+
+    /**
+     * MNT-11823: Upload of PPTX causes very high memory usage leading to system instability<br />
+     * <br />
+     * Returns filtered list of {@link PackageRelationship} relationships if properties extraction is enabled and parsing is going on for XSLF document or all relationships of the
+     * document
+     * 
+     * @param factory - {@link POIXMLFactory} instance
+     * @param packagePart - {@link PackagePart} instance which represents part of OOXML package
+     * @return {@link Iterable}&lt;{@link PackageRelationship}&gt; instance which contains list of allowable package relationships
+     * @throws InvalidFormatException
+     */
+    @SuppressWarnings("unchecked")
+    public static Iterable<PackageRelationship> getRelationships(POIXMLFactory factory, PackagePart packagePart) throws InvalidFormatException
+    {
+        Boolean poiExtractPropertiesOnly = getProperty(Boolean.class, PROP_POI_EXTRACT_PROPERTIES_ONLY);
+        Set<String> poiAllowableXslfRelationshipTypes = getProperty(Set.class, PROP_POI_ALLOWABLE_XSLF_RELATIONSHIP_TYPES);
+
+        if (!poiExtractPropertiesOnly || !(factory instanceof XSLFFactory))
+        {
+            return packagePart.getRelationships();
+        }
+
+        List<PackageRelationship> result = new LinkedList<PackageRelationship>();
+
+        if (null == poiAllowableXslfRelationshipTypes)
+        {
+            return result;
+        }
+
+        if (1 == poiAllowableXslfRelationshipTypes.size())
+        {
+            return packagePart.getRelationshipsByType(poiAllowableXslfRelationshipTypes.iterator().next());
+        }
+
+        for (String type : poiAllowableXslfRelationshipTypes)
+        {
+            PackageRelationshipCollection relationshipsByType = packagePart.getRelationshipsByType(type);
+            for (PackageRelationship relationship : relationshipsByType)
+            {
+                result.add(relationship);
+            }
+        }
+
+        return result;
+    }
+}
Index: src/ooxml/java/org/apache/poi/POIXMLDocument.java
===================================================================
--- src/ooxml/java/org/apache/poi/POIXMLDocument.java	(revision 1708952)
+++ src/ooxml/java/org/apache/poi/POIXMLDocument.java	(working copy)
@@ -13,6 +13,10 @@
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
+
+   2015 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
 ==================================================================== */
 package org.apache.poi;
 
@@ -116,12 +120,12 @@
         inp.mark(4);
 
         byte[] header = new byte[4];
-        IOUtils.readFully(inp, header);
+        int bytesRead = IOUtils.readFully(inp, header);
 
         // Wind back those 4 bytes
         if(inp instanceof PushbackInputStream) {
             PushbackInputStream pin = (PushbackInputStream)inp;
-            pin.unread(header);
+            pin.unread(header, 0, bytesRead);
         } else {
             inp.reset();
         }
@@ -128,6 +132,7 @@
 
         // Did it match the ooxml zip signature?
         return (
+                bytesRead == 4 &&
                 header[0] == POIFSConstants.OOXML_FILE_HEADER[0] &&
                 header[1] == POIFSConstants.OOXML_FILE_HEADER[1] &&
                 header[2] == POIFSConstants.OOXML_FILE_HEADER[2] &&
Index: src/ooxml/java/org/apache/poi/POIXMLDocumentPart.java
===================================================================
--- src/ooxml/java/org/apache/poi/POIXMLDocumentPart.java	(revision 1708952)
+++ src/ooxml/java/org/apache/poi/POIXMLDocumentPart.java	(working copy)
@@ -10,12 +10,16 @@
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-==================================================================== */
-package org.apache.poi;
-
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+   2014 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
+==================================================================== */
+package org.apache.poi;
+
 import java.io.IOException;
 import java.net.URI;
 import java.util.ArrayList;
@@ -35,12 +39,13 @@
 import org.apache.poi.openxml4j.opc.PackagePartName;
 import org.apache.poi.openxml4j.opc.PackageRelationship;
 import org.apache.poi.openxml4j.opc.PackageRelationshipCollection;
-import org.apache.poi.openxml4j.opc.PackageRelationshipTypes;
-import org.apache.poi.openxml4j.opc.PackagingURIHelper;
-import org.apache.poi.openxml4j.opc.TargetMode;
-import org.apache.poi.util.POILogFactory;
-import org.apache.poi.util.POILogger;
-import org.apache.xmlbeans.XmlOptions;
+import org.apache.poi.openxml4j.opc.PackageRelationshipTypes;
+import org.apache.poi.openxml4j.opc.PackagingURIHelper;
+import org.apache.poi.openxml4j.opc.TargetMode;
+import org.apache.poi.patch.AlfrescoPoiPatchUtils;
+import org.apache.poi.util.POILogFactory;
+import org.apache.poi.util.POILogger;
+import org.apache.xmlbeans.XmlOptions;
 
 /**
  * Represents an entry of a OOXML package.
@@ -399,13 +404,13 @@
      * using the specified factory
      *
      * @param factory   the factory object that creates POIXMLFactory instances
-     * @param context   context map containing already visited noted keyed by targetURI
-     */
-    protected void read(POIXMLFactory factory, Map<PackagePart, POIXMLDocumentPart> context) throws OpenXML4JException {
-        PackageRelationshipCollection rels = packagePart.getRelationships();
-        for (PackageRelationship rel : rels) {
-            if(rel.getTargetMode() == TargetMode.INTERNAL){
-                URI uri = rel.getTargetURI();
+     * @param context   context map containing already visited noted keyed by targetURI
+     */
+    protected void read(POIXMLFactory factory, Map<PackagePart, POIXMLDocumentPart> context) throws OpenXML4JException {
+        Iterable<PackageRelationship> rels = AlfrescoPoiPatchUtils.getRelationships(factory, packagePart);
+        for (PackageRelationship rel : rels) {
+            if(rel.getTargetMode() == TargetMode.INTERNAL){
+                URI uri = rel.getTargetURI();
 
                 PackagePart p;
                 if(uri.getRawFragment() != null) {
Index: src/ooxml/java/org/apache/poi/xslf/usermodel/XSLFSlide.java
===================================================================
--- src/ooxml/java/org/apache/poi/xslf/usermodel/XSLFSlide.java	(revision 1708952)
+++ src/ooxml/java/org/apache/poi/xslf/usermodel/XSLFSlide.java	(working copy)
@@ -13,14 +13,22 @@
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
+
+   2014 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src 
 ==================================================================== */
 package org.apache.poi.xslf.usermodel;
 
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParserFactory;
+
 import org.apache.poi.POIXMLDocumentPart;
 import org.apache.poi.openxml4j.opc.PackagePart;
 import org.apache.poi.openxml4j.opc.PackageRelationship;
 import org.apache.poi.util.Beta;
 import org.apache.xmlbeans.XmlException;
+import org.apache.xmlbeans.XmlOptions;
 import org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties;
 import org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D;
 import org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps;
@@ -33,6 +41,7 @@
 import org.openxmlformats.schemas.presentationml.x2006.main.CTSlide;
 import org.openxmlformats.schemas.presentationml.x2006.main.SldDocument;
 import org.openxmlformats.schemas.presentationml.x2006.main.CTBackground;
+import org.xml.sax.SAXException;
 
 import java.awt.Graphics2D;
 import java.io.IOException;
@@ -54,7 +63,11 @@
     }
 
     /**
-     * Construct a SpreadsheetML slide from a package part
+     * Construct a SpreadsheetML slide from a package part<br /><br />
+     * 
+     * Use the current configuration for the XML reader instead of Piccolo.<br />
+     * Configuration of XML-parser and the reader will be loaded as described here: 
+     * <a href="http://docs.oracle.com/javase/7/docs/api/javax/xml/parsers/SAXParserFactory.html#newInstance%28%29">SAXParserFactory.html#newInstance()</a>
      *
      * @param part the package part holding the slide data,
      * the content type must be <code>application/vnd.openxmlformats-officedocument.slide+xml</code>
@@ -64,10 +77,21 @@
     XSLFSlide(PackagePart part, PackageRelationship rel) throws IOException, XmlException {
         super(part, rel);
 
-        SldDocument doc =
-            SldDocument.Factory.parse(getPackagePart().getInputStream());
-        _slide = doc.getSld();
-        setCommonSlideData(_slide.getCSld());
+        try {
+            XmlOptions xmlOptions = new XmlOptions();
+            xmlOptions.setLoadUseXMLReader(SAXParserFactory.newInstance().newSAXParser().getXMLReader());
+
+            SldDocument doc =
+                SldDocument.Factory.parse(getPackagePart().getInputStream(), xmlOptions);
+            _slide = doc.getSld();
+            setCommonSlideData(_slide.getCSld());
+        }
+        catch (SAXException e) {
+            throw new XmlException(e);
+        }
+        catch (ParserConfigurationException e) {
+            throw new XmlException(e);
+        }
     }
 
 
Index: src/ooxml/java/org/apache/poi/xwpf/usermodel/XWPFFootnotes.java
===================================================================
--- src/ooxml/java/org/apache/poi/xwpf/usermodel/XWPFFootnotes.java	(revision 1708952)
+++ src/ooxml/java/org/apache/poi/xwpf/usermodel/XWPFFootnotes.java	(working copy)
@@ -10,13 +10,17 @@
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-==================================================================== */
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+   2014 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
+==================================================================== */
+
+package org.apache.poi.xwpf.usermodel;
 
-package org.apache.poi.xwpf.usermodel;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -29,12 +33,13 @@
 
 import org.apache.poi.POIXMLDocumentPart;
 import org.apache.poi.POIXMLException;
-import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
-import org.apache.poi.openxml4j.opc.PackagePart;
-import org.apache.poi.openxml4j.opc.PackageRelationship;
-import org.apache.xmlbeans.XmlException;
-import org.apache.xmlbeans.XmlOptions;
-
+import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
+import org.apache.poi.openxml4j.opc.PackagePart;
+import org.apache.poi.openxml4j.opc.PackageRelationship;
+import org.apache.poi.patch.AlfrescoPoiPatchUtils;
+import org.apache.xmlbeans.XmlException;
+import org.apache.xmlbeans.XmlOptions;
+
 import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFtnEdn;
 import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFootnotes;
 import org.openxmlformats.schemas.wordprocessingml.x2006.main.FootnotesDocument;
@@ -76,14 +81,15 @@
             ctFootnotes = notesDoc.getFootnotes();
         } catch (XmlException e) {
             throw new POIXMLException();
-        }
+        }
+
+        // Find our footnotes
+        List<CTFtnEdn> readonlyFootnoteList = AlfrescoPoiPatchUtils.getLimitedReadonlyList(ctFootnotes);
+        for(CTFtnEdn note : readonlyFootnoteList) {
+            listFootnote.add(new XWPFFootnote(note, this));
+        }
+    }
 
-        // Find our footnotes
-        for(CTFtnEdn note : ctFootnotes.getFootnoteList()) {
-            listFootnote.add(new XWPFFootnote(note, this));
-        }
-    }
-
     @Override
     protected void commit() throws IOException {
         XmlOptions xmlOptions = new XmlOptions(DEFAULT_XML_OPTIONS);
Index: src/ooxml/testcases/org/apache/poi/TestDetectAsOOXML.java
===================================================================
--- src/ooxml/testcases/org/apache/poi/TestDetectAsOOXML.java	(revision 1708952)
+++ src/ooxml/testcases/org/apache/poi/TestDetectAsOOXML.java	(working copy)
@@ -14,17 +14,25 @@
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
+
+   2015 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
 ==================================================================== */
         
 
 package org.apache.poi;
 
-import junit.framework.TestCase;
-import java.io.*;
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.io.PushbackInputStream;
+import java.util.Arrays;
 
 import org.apache.poi.hssf.HSSFTestDataSamples;
 import org.apache.poi.openxml4j.opc.OPCPackage;
 
+import junit.framework.TestCase;
+
 /**
  * Class to test that HXF correctly detects OOXML
  *  documents
@@ -36,7 +44,7 @@
         OPCPackage.open(HSSFTestDataSamples.openSampleFileStream("sample.xlsx"));
 	}
 	
-	public void testDetectAsPOIFS() throws Exception {
+	public void testDetectAsOOXML() throws Exception {
 		InputStream in;
 		
 		// ooxml file is
@@ -57,4 +65,22 @@
 		);
 		assertFalse(POIXMLDocument.hasOOXMLHeader(in));
 	}
+	
+	public void testFileCorruption() throws Exception {
+	    
+	    // create test InputStream
+	    byte[] testData = { (byte)1, (byte)2, (byte)3 };
+        ByteArrayInputStream testInput = new ByteArrayInputStream(testData);
+        
+        // detect header
+        InputStream in = new PushbackInputStream(testInput, 10);
+        assertFalse(POIXMLDocument.hasOOXMLHeader(in));
+        
+        // check if InputStream is still intact
+        byte[] test = new byte[3];
+        in.read(test);
+        assertTrue(Arrays.equals(testData, test));
+        assertEquals(-1, in.read());
+	}
+
 }
Index: src/testcases/org/apache/poi/poifs/filesystem/TestNPOIFSFileSystem.java
===================================================================
--- src/testcases/org/apache/poi/poifs/filesystem/TestNPOIFSFileSystem.java	(revision 1708952)
+++ src/testcases/org/apache/poi/poifs/filesystem/TestNPOIFSFileSystem.java	(working copy)
@@ -19,15 +19,18 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PushbackInputStream;
 import java.nio.ByteBuffer;
+import java.util.Arrays;
 import java.util.Iterator;
 
-import junit.framework.TestCase;
-
 import org.apache.poi.POIDataSamples;
 import org.apache.poi.hpsf.PropertySet;
 import org.apache.poi.hpsf.PropertySetFactory;
 import org.apache.poi.hpsf.SummaryInformation;
+import org.apache.poi.hssf.HSSFTestDataSamples;
 import org.apache.poi.poifs.common.POIFSConstants;
 import org.apache.poi.poifs.property.NPropertyTable;
 import org.apache.poi.poifs.property.Property;
@@ -34,6 +37,8 @@
 import org.apache.poi.poifs.property.RootProperty;
 import org.apache.poi.poifs.storage.HeaderBlock;
 
+import junit.framework.TestCase;
+
 /**
  * Tests for the new NIO POIFSFileSystem implementation
  */
@@ -589,5 +594,49 @@
       // TODO The rest of the test
    }
    
+   public void testDetectAsPOIFS() {
+       
+       // ooxml file isn't
+       confirmIsPOIFS("SampleSS.xlsx", false);
+       
+       // xls file is
+       confirmIsPOIFS("SampleSS.xls", true);
+       
+       // text file isn't
+       confirmIsPOIFS("SampleSS.txt", false);
+   }
+
+   private static final InputStream openSampleStream(String sampleFileName) {
+       return HSSFTestDataSamples.openSampleFileStream(sampleFileName);
+   }
+   
+   private void confirmIsPOIFS(String sampleFileName, boolean expectedResult) {
+       InputStream in  = new PushbackInputStream(openSampleStream(sampleFileName), 10);
+       boolean actualResult;
+       try {
+           actualResult = NPOIFSFileSystem.hasPOIFSHeader(in);
+       } catch (IOException e) {
+           throw new RuntimeException(e);
+       }
+       assertEquals(expectedResult, actualResult);
+   }
+   
+   public void testFileCorruption() throws Exception {
+       
+       // create test InputStream
+       byte[] testData = { (byte)1, (byte)2, (byte)3 };
+       ByteArrayInputStream testInput = new ByteArrayInputStream(testData);
+       
+       // detect header
+       InputStream in = new PushbackInputStream(testInput, 10);
+       assertFalse(NPOIFSFileSystem.hasPOIFSHeader(in));
+       
+       // check if InputStream is still intact
+       byte[] test = new byte[3];
+       in.read(test);
+       assertTrue(Arrays.equals(testData, test));
+       assertEquals(-1, in.read());
+   }
+   
    // TODO Directory/Document write tests
 }
Index: src/testcases/org/apache/poi/poifs/filesystem/TestOffice2007XMLException.java
===================================================================
--- src/testcases/org/apache/poi/poifs/filesystem/TestOffice2007XMLException.java	(revision 1708952)
+++ src/testcases/org/apache/poi/poifs/filesystem/TestOffice2007XMLException.java	(working copy)
@@ -13,15 +13,24 @@
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
+
+   2015 - Alfresco Software, Ltd.
+   Alfresco Software has modified source of this file
+   The details of changes as svn diff can be found in svn at location root/projects/3rd-party/src
 ==================================================================== */
 
 package org.apache.poi.poifs.filesystem;
 
-import junit.framework.TestCase;
-import java.io.*;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PushbackInputStream;
+import java.util.Arrays;
 
 import org.apache.poi.hssf.HSSFTestDataSamples;
 
+import junit.framework.TestCase;
+
 /**
  * Class to test that POIFS complains when given an Office 2007 XML document
  *
@@ -67,4 +76,22 @@
 		}
 		assertEquals(expectedResult, actualResult);
 	}
+    
+    public void testFileCorruption() throws Exception {
+        
+        // create test InputStream
+        byte[] testData = { (byte)1, (byte)2, (byte)3 };
+        ByteArrayInputStream testInput = new ByteArrayInputStream(testData);
+        
+        // detect header
+        InputStream in = new PushbackInputStream(testInput, 10);
+        assertFalse(POIFSFileSystem.hasPOIFSHeader(in));
+        
+        // check if InputStream is still intact
+        byte[] test = new byte[3];
+        in.read(test);
+        assertTrue(Arrays.equals(testData, test));
+        assertEquals(-1, in.read());
+	}
+
 }
