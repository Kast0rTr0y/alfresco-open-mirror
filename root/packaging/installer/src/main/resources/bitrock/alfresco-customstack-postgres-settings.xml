<component>
    <name>alfrescocustomstacksettings</name>
    <description>//Alfresco Custom Stack Settings</description>
    <selected>1</selected>
    <show>0</show>
    <preBuildActionList>
        <!-- Only OS X x64 supported -->
        <setInstallerVariable name="component(javasettings).parameter(java_osx_arch).value" value="x64">
            <ruleList>
                <compareText text="${platform_name}" value="osx" logic="equals" />
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="component(alfresco).parameter(alfresco_database_name).default" value="alfresco"/>
        <setInstallerVariable name="component(script).parameter(ctlscript_unix).value" value="alfresco.sh"/>

        <setInstallerVariable name="component(java).show" value="0"/>
        <setInstallerVariable name="component(java).selected" value="1"/>
        <setInstallerVariable name="component(java).canBeEdited" value="0"/>
        <setInstallerVariable name="component(java).detailedDescription" value="Java Component required to run ${product_fullname}"/>
        <setInstallerVariable name="component(java).parameter(java_required_jdk).value" value="1"/>
        <setInstallerVariable name="component(java).parameter(java_min_version).value" value="1.7.0_25"/>
        <!-- Alfresco don't won't to abort the installation if proper JDK not found -->
        <setInstallerVariable name="component(java).parameter(java_required_or_abort).value" value="1"/>
        <setInstallerVariable name="component(tomcat).parameter(tomcat_dirname).value" value="tomcat"/>
        <setInstallerVariable name="component(baseparamdir).parameter(installdir).title" value="Installation Folder"/>
        <setInstallerVariable name="component(baseparamdir).parameter(installdir).explanation" value="${'${tr('Choose a folder to install ${product_fullname}.')}'}"/>

        <!-- PostgreSQL specifics -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(postgres).canBeEdited" value="0"/>
                <setInstallerVariable name="component(postgres).parameter(postgres_root_password).ask" value="0"/>
                <setInstallerVariable name="component(postgres).canBeEdited" value="1"/>
            </actionList>
            <ruleList>
                <componentTest logic="exists" name="postgres"/>
            </ruleList>
        </actionGroup>

        <!-- Alfresco Share specifics -->
        <actionGroup>
            <actionList>
                <!-- Disable password prompt when PostgreSQL is not packaged -->
                <setInstallerVariable name="component(alfresco).parameter(alfresco_admin_password).allowEmptyValue" value="1"/>
                <setInstallerVariable name="component(alfresco).parameter(alfresco_admin_password).ask" value="0"/>
                <!-- Ask for Platform URL -->
                <setInstallerVariable name="component(alfresco).parameter(repository_url_port).ask" value="1"/>
                <!-- Disable RMI panel -->
                <setInstallerVariable name="component(alfresco).parameter(alfresco_rmi_port).ask" value="0"/>
                <!-- Disable FTP panel -->
                <setInstallerVariable name="component(alfresco).parameter(alfresco_ftp_port).ask" value="0"/>
            </actionList>
            <ruleList>
                <compareText text="${product_fullname}" logic="equals" value="Alfresco One Share"/>
            </ruleList>
        </actionGroup>
    </preBuildActionList>
    <initializationActionList>
        <setInstallerVariable name="alfresco_installer_bitness" value="64"/>
        <setInstallerVariable name="alfresco_installer_bitness" value="32">
            <ruleList>
                <compareText text="${project.installerFilename}" logic="does_not_contain" value="x64"/>
                <compareText text="${project.installerFilename}" logic="contains" value="windows"/>
            </ruleList>
        </setInstallerVariable>

        <!-- Libreoffice specifics -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(libreofficecomponent).parameter(libreofficeservice_notstart).value" value="1"/>
                <setInstallerVariable name="component(libreofficecomponent).parameter(libreoffice_installed_as_service).value" value="0"/>
            </actionList>
            <ruleList>
                <componentTest logic="exists" name="libreofficecomponent"/>
            </ruleList>
        </actionGroup>

        <setInstallerVariable name="component(tomcatservice).parameter(tomcatservice_notstart).value" value="1"/>

        <!-- PostgreSQL specifics -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(postgresinitdb).parameter(database_name).value" value="alfresco"/>
                <setInstallerVariable name="component(postgresinitdb).parameter(database_user).value" value="alfresco"/>
                <setInstallerVariable name="component(postgres).parameter(postgres_installation_type).ask" value="0"/>
                <setInstallerVariable name="component(postgres).parameter(postgres_installation_type).value" value="bundled"/>
                <setInstallerVariable name="component(postgres).parameter(postgres_logminmessage_level).value" value="fatal"/>
                <setInstallerVariable name="component(postgres).parameter(postgres_logminerrorstatement_level).value" value="fatal"/>
                <setInstallerVariable name="component(postgres).parameter(postgres_enable_silentmode).value" value="1"/>
                <setInstallerVariable name="component(postgres).parameter(postgres_max_connections).value" value="300"/>
            </actionList>
            <ruleList>
                <componentTest logic="exists" name="postgres"/>
            </ruleList>
        </actionGroup>

        <!-- Install dir adaptation if Windows -->
        <setInstallerVariable name="installdir" value="${env(SYSTEMDRIVE)}\${alfresco_package}">
            <ruleList>
                <platformTest type="windows"/>
            </ruleList>
        </setInstallerVariable>

        <setInstallerVariable name="component(baseparamdir).parameter(base_allow_spaces).value" value="0"/>
        <setInstallerVariable name="component(baseparamdir).parameter(base_allow_spaces).value" value="1">
            <ruleList>
                <compareText text="${installer_ui}" logic="equals" value="unattended"/>
            </ruleList>
        </setInstallerVariable>

        <!-- JVM config -->
        <!-- 50% in MB-->
        <mathExpression text="int(ceil(${machine_total_memory}/2))" variable="java_xmx_setting"/>
        <setInstallerVariable name="java_xmx_setting" value="2048">
            <ruleList>
                <compareValues value1="${machine_total_memory}" logic="less" value2="4096"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="java_xmx_setting" value="1024">
            <ruleList>
                <platformTest type="windows"/>
                <platformTest negate="1" type="windows-x64"/> <!--set to 1GB if it is Windows 32 -->
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="component(tomcat).parameter(tomcat_memory_settings_unix).value" value="-Xms512M -Xmx${java_xmx_setting}M"/>
        <setInstallerVariable name="component(tomcat).parameter(tomcat_extra_opts_unix).value" value="-XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Djava.awt.headless=true -Dalfresco.home=@@BITROCK_INSTALLDIR@@ -XX:ReservedCodeCacheSize=128m"/>
        <setInstallerVariable name="component(tomcat).parameter(tomcat_extra_opts_windows).value">
            <value>++JvmOptions="-XX:+DisableExplicitGC" ++JvmOptions="-XX:+UseConcMarkSweepGC" ++JvmOptions="-XX:+UseParNewGC" ++JvmOptions="-XX:ReservedCodeCacheSize=128m" ++JvmOptions="-Dalfresco.home=@@BITROCK_INSTALLDIR@@" </value>
        </setInstallerVariable>
        <setInstallerVariable name="component(tomcat).parameter(tomcat_memory_settings_windows).value">
            <value>--JvmMs 512 --JvmMx ${java_xmx_setting}</value>
        </setInstallerVariable>
    </initializationActionList>
    <preInstallationActionList>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(postgresservice).selected" value="0"/>
                <setInstallerVariable name="component(postgresinitdb).selected" value="0"/>
                <setInstallerVariable name="component(alfrescopostgresdbcreation).selected" value="0"/>
                <setInstallerVariable name="component(tomcatservice).parameter(tomcatservice_waittostart).value" value="0"/>
            </actionList>
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <componentTest logic="exists" name="postgres"/>
                <ruleGroup>
                    <ruleList>
                        <compareText logic="equals" text="${installer_ui}" value="unattended"/>
                        <isFalse value="${component(postgres).selected}"/>
                    </ruleList>
                </ruleGroup>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>
    <componentSelectionValidationActionList>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(java).parameter(java_installation_type).value" value="bundled"/>
            </actionList>
            <ruleList>
                <isTrue value="${component(javaalfresco).selected}"/>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(postgresservice).selected" value="1"/>
                <setInstallerVariable name="component(postgresinitdb).selected" value="1"/>
                <setInstallerVariable name="component(alfrescopostgresdbcreation).selected" value="1"/>
                <setInstallerVariable name="component(tomcatservice).parameter(tomcatservice_waittostart).value" value="1"/>
            </actionList>
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <componentTest logic="exists" name="postgres"/>
                <ruleGroup>
                    <ruleList>
                        <isTrue value="${component(postgres).selected}"/>
                    </ruleList>
                </ruleGroup>
            </ruleList>
        </actionGroup>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(postgresservice).selected" value="0"/>
                <setInstallerVariable name="component(postgresinitdb).selected" value="0"/>
                <setInstallerVariable name="component(alfrescopostgresdbcreation).selected" value="0"/>
                <setInstallerVariable name="component(tomcatservice).parameter(tomcatservice_waittostart).value" value="0"/>
            </actionList>
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <componentTest logic="exists" name="postgres"/>
                <ruleGroup>
                    <ruleList>
                        <isFalse value="${component(postgres).selected}"/>
                    </ruleList>
                </ruleGroup>
            </ruleList>
        </actionGroup>

        <!-- Remote Solr configuration scenario -->
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(alfresco).parameter(remote_solr_configuration).ask" value="1" />
            </actionList>
            <ruleList>
                <ruleGroup ruleEvaluationLogic="or">
                    <ruleList>
                        <ruleGroup>
                            <ruleList>
                                <compareText logic="equals" text="${project.fullName}" value="Alfresco One Platform"/>
                                <isFalse value="${component(alfrescosolr4).selected}"/>
                            </ruleList>
                        </ruleGroup>
                        <ruleGroup>
                            <ruleList>
                                <compareText logic="does_not_equal" text="${project.fullName}" value="Alfresco One Platform"/>
                                <compareText logic="does_not_equal" text="${project.fullName}" value="Alfresco One Share"/>
                                <compareText logic="equals" text="${alfresco_edition}" value="enterprise"/>
                                <isFalse value="${component(alfrescosolr4).selected}"/>
                                <isFalse value="${component(alfrescosolr).selected}"/>
                            </ruleList>
                        </ruleGroup>
                    </ruleList>
                </ruleGroup>
            </ruleList>
        </actionGroup>

        <!-- Sharded Solr configuration panel -->
        <setInstallerVariable name="component(alfresco).parameter(sharded_solr).ask" value="1">
            <ruleList>
                <compareText logic="does_not_equal" text="${project.fullName}" value="Alfresco One Share"/>
                <compareText logic="equals" text="${alfresco_edition}" value="enterprise"/>
                <isTrue value="${component(alfrescosolr4).selected}"/>
            </ruleList>
        </setInstallerVariable>

    </componentSelectionValidationActionList>
    <parameterList>
        <choiceParameter>
            <name>alfrescocustomstack_installation_type</name>
            <title>Installation Type</title>
            <default>easy</default>
            <explanation/>
            <cliOptionShow>0</cliOptionShow>
            <displayType>radiobuttons</displayType>
            <insertBefore>components</insertBefore>
            <optionList>
                <option text="Easy - Install using the default configuration." value="easy"/>
                <option description="Choose optional components to install." text="Advanced - Configure server ports and service properties." value="advanced"/>
            </optionList>
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(postgres).selected" value="1"/>
                        <setInstallerVariable name="component(postgresinitdb).selected" value="1"/>
                        <setInstallerVariable name="component(postgresservice).selected" value="1"/>
                        <setInstallerVariable name="component(alfrescopostgresdbcreation).selected" value="1"/>
                        <setInstallerVariable name="component(tomcatservice).parameter(tomcatservice_waittostart).value" value="1"/>
                        <componentSelection select="libreofficecomponent,aosmodule,alfrescowmqs,alfrescogoogledocs"/>
                    </actionList>
                    <ruleList>
                        <componentTest logic="exists" name="postgres"/>
                        <componentTest logic="exists" name="postgresinitdb"/>
                        <componentTest logic="exists" name="postgresservice"/>
                        <componentTest logic="exists" name="alfrescopostgresdbcreation"/>
                        <componentTest logic="exists" name="libreofficecomponent"/>
                    </ruleList>
                </actionGroup>
                <!-- Advanced mode -->
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(tomcat).parameter(tomcat_show_ports).value" value="1"/>
                        <setInstallerVariable name="component(libreofficecomponent).parameter(libreoffice_show_ports).value" value="1">
                            <ruleList>
                                <componentTest logic="exists" name="libreofficecomponent"/>
                            </ruleList>
                        </setInstallerVariable>
                        <setInstallerVariable name="component(postgres).parameter(postgres_show_ports).value" value="1">
                            <ruleList>
                                <componentTest logic="exists" name="postgres"/>
                            </ruleList>
                        </setInstallerVariable>
                        <setInstallerVariable name="alfresco_show_ports" value="yes"/>
                        <setInstallerVariable name="project.allowComponentSelection" value="1"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${alfrescocustomstack_installation_type}" value="advanced"/>
                    </ruleList>
                </actionGroup>

                <!-- Easy mode -->
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="component(tomcat).parameter(tomcat_show_ports).value" value="0"/>
                        <setInstallerVariable name="component(libreofficecomponent).parameter(libreoffice_show_ports).value" value="0">
                            <ruleList>
                                <componentTest logic="exists" name="libreofficecomponent"/>
                            </ruleList>
                        </setInstallerVariable>
                        <setInstallerVariable name="component(postgres).parameter(postgres_show_ports).value" value="0">
                            <ruleList>
                                <componentTest logic="exists" name="postgres"/>
                            </ruleList>
                        </setInstallerVariable>
                        <setInstallerVariable name="alfresco_show_ports" value="no"/>
                        <setInstallerVariable name="project.allowComponentSelection" value="0"/>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${alfrescocustomstack_installation_type}" value="easy"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>
        </choiceParameter>
        <!-- Service startup (Windows specifics) -->
        <choiceParameter>
            <name>alfrescocustomstack_services_startup</name>
            <title>Service Startup Configuration</title>
            <default>demand</default>
            <explanation>Select services startup type.</explanation>
            <displayType>radiobuttons</displayType>
            <insertBefore>readytoinstall</insertBefore>
            <optionList>
                <option text="Manual - Configure servers to start services manually" value="demand"/>
                <option text="Auto - Configure servers to start automatically" value="auto"/>
            </optionList>
            <ruleList>
                <platformTest type="windows"/>
                <compareText logic="equals" text="${alfrescocustomstack_installation_type}" value="advanced"/>
            </ruleList>
        </choiceParameter>
    </parameterList>
    <readyToInstallActionList>
        <setInstallerVariable name="postgres_data_directory" value="${alfresco_data_directory}/postgresql">
            <ruleList>
                <componentTest logic="exists" name="postgresservice"/>
            </ruleList>
        </setInstallerVariable>
        <actionGroup>
            <actionList>
                <setInstallerVariable name="component(tomcatservice).parameter(tomcatservice_startup).value" value="${alfrescocustomstack_services_startup}"/>
                <setInstallerVariable name="component(postgresservice).parameter(postgres_service_startup).value" value="${alfrescocustomstack_services_startup}">
                    <ruleList>
                        <componentTest logic="exists" name="postgresservice"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="component(libreofficecomponent).parameter(libreofficeservice_startup).value" value="${alfrescocustomstack_services_startup}">
                    <ruleList>
                        <componentTest logic="exists" name="libreofficecomponent"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
            <ruleList>
                <platformTest type="windows"/>
            </ruleList>
        </actionGroup>
    </readyToInstallActionList>
    <postInstallationActionList>
        <alfrescoConfigure alfrescoFiles="${tomcat_server_directory}/bin/service.bat;${tomcat_server_directory}/scripts/ctl.sh;${tomcat_server_directory}/bin/setenv.bat;${tomcat_server_directory}/bin/setenv.sh"/>
    </postInstallationActionList>
</component>
